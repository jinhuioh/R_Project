df <- data.frame(names3. values. result3)
df
df <- data.frame(names3, values, result3)
df
length(values)
print(result3)
for (x in 1:length(values)) {
n <- readline('name input > ')
names <- c(names3, n)
}
print(names3)
df <- data.frame(names3, values, result3)
for (x in 1:length(values)) {
n <- readline('name input > ')
names3 <- c(names3, n)
}
t
print(names3)
df <- data.frame(names3, values, result3)
print(class(df))
df
print(str(df))
(str(df))
str(df)
dim(df)
head(df,3)
dim(df)
df[1:2, 1:2]
df[c(1,3,5), c(1,3)]
#컬럼명 result3에서 짝수인것만 찾기
df <- subset(df, result3 =='even')
print(df2)
#컬럼명 result3에서 짝수인것만 찾기
df2 <- subset(df, result3 =='even')
print(df2)
for (x in 1:length(values)) {
n <- readline('name input > ')
names3 <- c(names3, n)
}
#각 값들이 짝수인지 판별해서
#짝수면 even 홀수면 odd로 집어넣어보자.
for (x in values) {
if(x%%2 == 0){
print('even')
#result3에 even으로 값을 붙여보자.
result3 <- c(result3, 'even')
}else{
print('odd')
#result3에 odd로 값을 붙여보자.
result3 <- c(result3, 'odd')
}
}
for (x in 1:length(values)) {
n <- readline('name input > ')
names3 <- c(names3, n)
}
print(names3)
df <- data.frame(names3, values, result3)
df <- data.frame(names3, values, result3)
#1번 다음에(중간에) 값을 넣어보자.
result2 <- append(result2, 333, after = 1)
33
print(result2)
#빈벡터 c
result3 <- c()
values = c(99, 22, 33, 43, 9 ,54, 65, 2)
#각 값들이 짝수인지 판별해서
#짝수면 even 홀수면 odd로 집어넣어보자.
for (x in values) {
if(x%%2 == 0){
print('even')
#result3에 even으로 값을 붙여보자.
result3 <- c(result3, 'even')
}else{
print('odd')
#result3에 odd로 값을 붙여보자.
result3 <- c(result3, 'odd')
}
}
length(values)
print(result3)
names3 <- c()
##입력값 받아서 names3에 누적시켜보자.
library(svDialogs)
for (x in 1:length(values)) {
n <- readline('name input > ')
names3 <- c(names3, n)
}
df <- data.frame(names3, values, result3)
print(class(df))
df
str(df)#df의 형태와 값, chr,num,chr등 타입까지 보여준다.
dim(df)#행렬 개수 보여줌
head(df,3)
dim(df)
df[1:2, 1:2]
#행(1,3,5)열(1,3)만 가져와보자.
df[c(1,3,5), c(1,3)]
#컬럼명 result3에서 짝수인것만 찾기
df2 <- subset(df, result3 =='even')
print(df2)
#df에서 values가 50이상 프린트
#df에서 values가 50미만 프린트
#result3가 even인 것을 찾아서 df3에 저장.
print(subset(df, values >50))
print(subset(df, values < 50))
df3 <- subset(df, result3 =='even')
df3 <- subset(df,values < 50 & result3 =='even')
df3
df.names3 <- df$names3
#df에서 names3컬럼을 추출할 때 $를 쓴다.
str(df.names3)
df.names3
table(df$names3)
df
df[c(1,4,8),1] <- 'kim'
df
df[c(6),1] <- 'song'
df[7,1] <- 'park'
df
table(df$names3)
df[c(5,7),1] <- 'park'
df
table(df$names3)
df4 <- table(df$names3)
df4
library(ggplot2)
ggplot(df, aes(x= names3, y=values))
ggplot(df, aes(x= names3, y=values)) + geom_bar()
ggplot(df, aes(x= names3, y=values)) + geom_point()
#빈벡터 c
engl <- c()
compu = c(99, 22, 33, 43, 100)
#각 값들이 짝수인지 판별해서
#짝수면 even 홀수면 odd로 집어넣어보자.
for (x in compu) {
resultm = x - 9
engl = c(resultm)
return(engl)
}
length(compu)
print(engl)
##반복문
for(x in 1:5){
print(x)
}
engl = c(resultm)
print(engl)
length(engl)
#각 값들이 짝수인지 판별해서
#짝수면 even 홀수면 odd로 집어넣어보자.
for (x in c(99, 22, 33, 43, 100)) {
resultm = x - 9
engl = c(resultm)
}
print(engl)
namel <- c()
# compu의 값에서 9씩 빼서 c()에 넣어보자.
for (x in compu) {
resultm = x - 9
}
engl = c(resultm)
print(engl)
engl = c(93, 32, 23, 53, 10)
name0 = c(a,b,c,d,e)
age0 = c(21, 44, 50, 30, 10)
df <- data.frame(name0, age0, compu, engl)
df0 <- data.frame(name0, age0, compu, engl)
compu = c(99, 22, 33, 43, 100)
engl = c(93, 32, 23, 53, 10)
name0 = c(a,b,c,d,e)
age0 = c(21, 44, 50, 30, 10)
df0 <- data.frame(name0, age0, compu, engl)
df0 <- data.frame(age0, compu, engl)
df0
name0 = c(a,b,c,d,e)
df0 <- data.frame(name0,age0, compu, engl)
df0 <- data.frame(name0, compu, engl)
df0 <- data.frame(age0, compu, engl)
df0
print(class(df0))
##입력값 받아서 names3에 누적시켜보자.
length(name0)
print(name0)
name0 = c(a,b,c,d,e)
print(name0)
a = c(a,b,e,t,q)
print(a)
a = c(jinhui,asdfasd,sdfsdfw,qerw,qdsdd)
a = (jinhui,asdfasd,sdfsdfw,qerw,qdsdd)
name0 = c('a','b','c','d','e')
##입력값 받아서 names3에 누적시켜보자.
length(name0)
df0 <- data.frame(name0, age0, compu, engl)
print(class(df0))
df0
library(ggplot2)
ggplot(df0, aes(x= name0, y=age0)) + geom_point()
print(mean(age0))
print(max(engl))
print(df[3,3])
print(df0[3,3])
print(df0[1:3,c(2,4)])
#영어점수가 평균보다  높은 사람들만
##새로운 df_new로 저장
print(mean(engl))
df0_new = subset(df0, engl > 42.2)
df0_new
## 컴퓨터점수와 영어점수를 합해서 total컬럼 생성
df0[total] = df0[compu] + df0[engl]
## 컴퓨터점수와 영어점수를 합해서 total컬럼 생성
df0['total'] = df0['compu'] + df0['engl']
df0
#total이 150점 이상이면 우수, 100점 이상이면 보통,
#아니면 미달의 값이 들어가는 result컬럼을 추가.
print(total)
#total이 150점 이상이면 우수, 100점 이상이면 보통,
#아니면 미달의 값이 들어가는 result컬럼을 추가.
print(df0[total])
#total이 150점 이상이면 우수, 100점 이상이면 보통,
#아니면 미달의 값이 들어가는 result컬럼을 추가.
print(table(df0$total))
df0$total
type(df0$total)
(df0$total)
(df0$total[i])
df0[total]
df0['total'][1]
df0['total']
df0['total'][2]
total = c(192, 54, 56, 96, 110)
totalc = c()
for(x in total){
if(x > 150){
totalc <- c(totalc, 우수)
}else if(100<x<150){
totalc <- c(totalc, 보통)
}else{
totalc <- c(totalc, 미달)
}
}
total = c(192, 54, 56, 96, 110)
totalc = c()
for(x in total){
if(x > 150){
totalc <- c(totalc, 우수)
}else if(100< x <150){
totalc <- c(totalc, 보통)
}else{
totalc <- c(totalc, 미달)
}
}
totalc <- c(totalc, 우수)
totalc <- c(totalc, '미달')
for(x in total){
if(x > 150){
totalc <- c(totalc, '우수')
}else if(100< x <150){
totalc <- c(totalc, '보통')
}else{
totalc <- c(totalc, '미달')
}
}
if(x > 150){
totalc <- c(totalc, '우수')
}else if(100< x <150){
totalc <- c(totalc, '보통')
}else{
totalc <- c(totalc, '미달')
}
totalc <- c(totalc, '보통통')
totalc <- c(totalc, '보통')
if(x > 150){
totalc <- c(totalc, '우수')
}else if(x < 100){
totalc <- c(totalc, '미달')
}else{
totalc <- c(totalc, '보통')
}
totalc <- c(totalc, '보통')
if(x > 150){
totalc <- c(totalc, '우수')
}else if(x < 100){
totalc <- c(totalc, '미달')
}else{
totalc <- c(totalc, '보통')
}
print(totalc)
total = c(192, 54, 56, 96, 110)
totalc = c()
for(x in total){
if(x > 150){
totalc <- c(totalc, '우수')
}else if(x < 100){
totalc <- c(totalc, '미달')
}else{
totalc <- c(totalc, '보통')
}
}
print(totalc)
df['totalc'] <- totalc
df['totalc'] <- c("우수", "미달", "미달", "미달", "보통")
df['totalc'] <- ("우수", "미달", "미달", "미달", "보통")
df['totalc'] <- c("우수", "미달", "미달", "미달", "보통")
total = c(192, 54, 56, 96, 110)
totalc = c()
for(x in total){
if(x > 150){
totalc <- c(totalc, '우수')
}else if(x < 100){
totalc <- c(totalc, '미달')
}else{
totalc <- c(totalc, '보통')
}
}
print(totalc)
df['totalc'] <- c("우수", "미달", "미달", "미달", "보통")
df['totalc'] <- test(df['total'])
test <- function(){
for(x in total){
if(x > 150){
totalc <- c(totalc, '우수')
}else if(x < 100){
totalc <- c(totalc, '미달')
}else{
totalc <- c(totalc, '보통')
}
}
}
print(totalc)
df['totalc'] <- test(df['total'])
df['totalc'] <- test(total)
total = c(192, 54, 56, 96, 110)
df['totalc'] <- test(total)
test <- function(x){
for(x in total){
if(x > 150){
totalc <- c(totalc, '우수')
}else if(x < 100){
totalc <- c(totalc, '미달')
}else{
totalc <- c(totalc, '보통')
}
}
}
print(totalc)
df['totalc'] <- test(total)
df0['totalc'] <- test(total)
df0
test(total)
print(test(total))
total = c(192, 54, 56, 96, 110)
totalc = c()
test <- function(x){
for(x in total){
if(x > 150){
totalc <- c(totalc, '우수')
}else if(x < 100){
totalc <- c(totalc, '미달')
}else{
totalc <- c(totalc, '보통')
}
}
}
print(totalc)
print(test(total))
for(x in total){
if(x > 150){
totalc <- c(totalc, '우수')
}else if(x < 100){
totalc <- c(totalc, '미달')
}else{
totalc <- c(totalc, '보통')
}
}
print(totalc)
df0['totalc'] <- (total)
df0
df0['totalc'] <- (totalc)
df0
## 최종 df의 내용과 행과 열의 개수 프린트
str(df0.total)#str구조 볼 때 씀
## 최종 df의 내용과 행과 열의 개수 프린트
str(df0)#str구조 볼 때 씀
table(df0$totalc)#빈도수 체크
dim.df0
dim(df0)
ggplot(df0, aes(x= name0, y=totalc)) + geom_point()
barplot(df0, main = 'This is my data', col='pink')
df0.totalc <- df0$totalc
barplot(df0.totalc, main = 'This is my data', col='pink')
df0.total<- df0$total
barplot(df0.total, main = 'This is my data', col='pink')
barplot(df0.total, main = 'This is total data', col='pink')
barplot(df0.total, main = 'This is total data', col='rainbow(5)')
barplot(df0.total, main = 'This is total data', + col='rainbow(5)')
barplot(df0.total, main = 'This is total data', + col=c('pink','red','yellow','green')
barplot(df0.total, main = 'This is total data', + col=c('pink','red','yellow','green'))
barplot(df0.total, main = 'This is total data', col=c('pink','red','yellow','green'))
barplot(df0.total, main = 'This is total data', col=c('pink','red','yellow','green','blue'))
barplot(df0.total, main = 'This is total data', col=c('pink','red','yellow','green','blue'))
barplot(df0$compu , main = 'This is total data', col='pink')
barplot(df0$compu , main = 'This is total data', col='pink', horiz=TRUE)
install.packages('plotrix')
library(plotrix)
pie3D(df0$compu , main='computer jumsu')
pie3D(df0$compu , main='computer jumsu', radius = 1)
## 최종 만들어진 df를 csv(df_csv.csv)로 저장
## 저장된 csv를 읽어와서 프린트
setwd('C:\R-himedia')#작업폴더 지정정
## 최종 만들어진 df를 csv(df_csv.csv)로 저장
## 저장된 csv를 읽어와서 프린트
setwd('C:\')#작업폴더 지정정
## 최종 만들어진 df를 csv(df_csv.csv)로 저장
## 저장된 csv를 읽어와서 프린트
setwd('C:\')#작업폴더 지정
df0
## 최종 만들어진 df를 csv(df_csv.csv)로 저장
## 저장된 csv를 읽어와서 프린트
setwd('C:/')#작업폴더 지정
df0
write.csv(df0, 'R dataFrame jinhuioh',row.names = F)
write.csv(df0, 'df0',row.names = F)
write.csv(df0, 'w',row.names = F)
## 최종 만들어진 df를 csv(df_csv.csv)로 저장
## 저장된 csv를 읽어와서 프린트
setwd('C:/')#작업폴더 지정
df0
write.csv(df0, 'w',row.names = F)
write.csv(df0, 'df0.csv',row.names = F)
## 최종 만들어진 df를 csv(df_csv.csv)로 저장
## 저장된 csv를 읽어와서 프린트
setwd('C:/')#작업폴더 지정
df0
write.csv(df0, 'df0.csv',row.names = F)
## 최종 만들어진 df를 csv(df_csv.csv)로 저장
## 저장된 csv를 읽어와서 프린트
setwd('C:\')#작업폴더 지정
df0
write.csv(df0, 'df0.csv',row.names = F)
## 최종 만들어진 df를 csv(df_csv.csv)로 저장
## 저장된 csv를 읽어와서 프린트
setwd('C:\')#작업폴더 지정
df0
write.csv(df0, 'df0.csv',row.names = F)
## 최종 만들어진 df를 csv(df_csv.csv)로 저장
## 저장된 csv를 읽어와서 프린트
setwd('C:\')
df0
write.csv(df0, 'df0.csv' ,row.names = F)
## 최종 만들어진 df를 csv(df_csv.csv)로 저장
## 저장된 csv를 읽어와서 프린트
setwd('C:\')
df0
write.csv(df0, 'df0.csv' ,row.names = F)
## 최종 만들어진 df를 csv(df_csv.csv)로 저장
## 저장된 csv를 읽어와서 프린트
setwd('C:\')
df0
write.csv(df0, 'df0.csv' ,row.names = F)
## 최종 만들어진 df를 csv(df_csv.csv)로 저장
## 저장된 csv를 읽어와서 프린트
setwd('C:\')
## 최종 만들어진 df를 csv(df_csv.csv)로 저장
## 저장된 csv를 읽어와서 프린트
setwd('C:\')
df0
## 최종 만들어진 df를 csv(df_csv.csv)로 저장
## 저장된 csv를 읽어와서 프린트
setwd ('C:\')
## 최종 만들어진 df를 csv(df_csv.csv)로 저장
## 저장된 csv를 읽어와서 프린트
setwd('C:\')
df00 <- subset(df0, age0 >20)
setwd('C:\')
setwd('C:\')
df00 <- subset(df0, age0 >20)
setwd('C:\jinhui')
setwd('C')
setwd('C:')
df0
write.csv(df0, 'df0', row.names = F)
write.csv(df0)
View(df2)
write.csv(df0, C:\df0)
write.csv(df0, C:\)
write.csv(df0, C:)
write.csv(df0, 'C:\df0')
write.csv(df0, 'C:\')
write.csv(df0, 'C')
write.csv(df0)
write.csv(df0, file = 'df0.csv')
write.csv(df0, file = 'df0.csv')
df0
install.packages('xlsx')
library(xlsx)
readDf0 <- read.xlsx('C:\R-workspace\rproject1', header=T,
sheetIndex=1)
readDf0 <- read.xlsx('C:\R-workspace\rproject1\df0.csv', header=T,
sheetIndex=1)
readDf0 <- read.xlsx('C:\R-workspace\rproject1\df0.csv', header=T)
readDf0 <- read.xlsx('df0.csv', header=T)
readDf0 <- read.xlsx('df0.csv', header=T, sheetIndex = 1)
readDf0 <- read.xlsx('C:\R-workspace\rproject1', header=T, sheetIndex = 1)
readDf0 <- read.xlsx('C:/R-workspace/rproject1', header=T, sheetIndex = 1)
readDf0 <- read.xlsx('C:/R-workspace/rproject1/df0.csv', header=T, sheetIndex = 1)
readDf0 <- read.xlsx('C:/R-workspace/rproject1/df0.csv', header=TRUE)
readDf0 <- read.xlsx('C:/R-workspace/rproject1/df0.csv', header=TRUE, sheetIndex = 1)
readDf0 <- read.csv('C:/R-workspace/rproject1/df0.csv', header=TRUE, sheetIndex = 1)
readDf0 <- read.csv('C:/R-workspace/rproject1/df0.csv',
header=TRUE)
readDf0
